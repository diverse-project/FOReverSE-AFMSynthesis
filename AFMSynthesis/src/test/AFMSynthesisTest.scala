package test

import org.scalatest.FlatSpec
import org.scalatest.Matchers
import java.io.File
import main.samples.randomAFMGeneration.RandomAttributedFMGenerationTest
import examples.RandomConfigurations
import input.CSVProductListParser
import synthesis.AFMSynthesizer
import scala.io.Source

class AFMSynthesisTest extends FlatSpec with Matchers{


  "BeTTy" should "generate some models" in {
	  val afmGenerator = new RandomAttributedFMGenerationTest
	  for (i <- 0 to 10) {
		  afmGenerator.generateModel(new File("input/betty_generated"), 5, 30, 30, 0, 10, 2)
	  }

  }
  
  "Product generator" should "list the product of the models generated by BeTTy in CSV files" in {
	  val productGenerator = new RandomConfigurations
	  val modelsDir = new File("input/betty_generated")
	  for (inputFile <- modelsDir.listFiles()) {
		  val inputName = inputFile.getName()
		  val outputName = inputName.substring(0, inputName.length - 4) + ".csv"
		  val outputFile = new File("input/matrices/" + outputName)
		  println("Generating products for " + inputName)
		  productGenerator.generateProducts(inputFile, outputFile)
	  }
	  
  }
  
  "CSV parser" should "list all products" in {
	  val parser = new CSVProductListParser
	  val dir = new File("input/matrices")
	  for (inputFile <- dir.listFiles()) {
		  parser.parse(inputFile.getAbsolutePath)._2.foreach(println)
	  }
  }
  
  "AFMSynthesizer" should "do stuff correctly" in {
	  val synthesizer = new AFMSynthesizer
	  val parser = new CSVProductListParser
	  val input = new File("input/matrices/BeTTy_275427906.csv")
	  val (features, products) = parser.parse(input.getAbsolutePath)
	  synthesizer.synthesize(features, products)
  }
  
}