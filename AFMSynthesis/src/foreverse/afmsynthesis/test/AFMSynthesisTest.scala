package foreverse.afmsynthesis.test

import org.scalatest.FlatSpec
import org.scalatest.Matchers
import java.io.File
import scala.io.Source
import foreverse.afmsynthesis.algorithm.CSVProductListParser
import foreverse.afmsynthesis.algorithm.AFMSynthesizer
import foreverse.afmsynthesis.solver.SATProductListSolver

class AFMSynthesisTest extends FlatSpec with Matchers{
  
  val INPUT_WIKI_DIR = "input/wikipedia-pcms/"


//  "BeTTy" should "generate some models" in {
//	  val afmGenerator = new RandomAttributedFMGenerationTest
//	  for (i <- 0 to 10) {
//		  afmGenerator.generateModel(new File("input/betty_generated"), 5, 30, 30, 0, 10, 2)
//	  }
//
//  }
//  
//  "Product generator" should "list the product of the models generated by BeTTy in CSV files" in {
//	  val productGenerator = new RandomConfigurations
//	  val modelsDir = new File("input/betty_generated")
//	  for (inputFile <- modelsDir.listFiles()) {
//		  val inputName = inputFile.getName()
//		  val outputName = inputName.substring(0, inputName.length - 4) + ".csv"
//		  val outputFile = new File("input/matrices/" + outputName)
//		  println("Generating products for " + inputName)
//		  productGenerator.generateProducts(inputFile, outputFile)
//	  }
//	  
//  }
  
//  "CSV parser" should "list all products" in {
//	  val parser = new CSVProductListParser
//	  val dir = new File(INPUT_WIKI_DIR)
//	  for (inputFile <- dir.listFiles() if inputFile.getName().endsWith(".csv")) {
//		  val productList = parser.parse(inputFile.getAbsolutePath)
//		  
//		  println(inputFile)
//		  println("----- VPs -----")
//		  productList.variationPoints.foreach(println)
//		  println("----- Products -----")
//		  productList.products.foreach(println)
//	  }
//  }
//  
//  "AFMSynthesizer" should "synthesize an AFM from a product list" in {
//	  val synthesizer = new AFMSynthesizer
//	  val parser = new CSVProductListParser
//	  
//	  val dir = new File(INPUT_WIKI_DIR)
//	  for (inputMatrix <- dir.listFiles() if inputMatrix.getName.endsWith(".csv")) {
//		println(inputMatrix)
//	    val productList = parser.parse(inputMatrix.getAbsolutePath)
//	    println(productList.variationPoints.size)
//	    val synthesisProblem = new SATProductListSolver(productList)
//	    val afm = synthesizer.synthesize(synthesisProblem)
//	    println(afm.diagram.features.size)
//	  }
//	  	  
//	  
//  }
  
//  "Prolog reasoner" should "run an external prolog program" in {
//  	  System.load((new File("lib/libsprt4-3-0.so")).getAbsolutePath())
//	  System.load((new File("lib/libspnative.so")).getAbsolutePath())
//
//	  val sp = new SICStus
//
//  }
  
}